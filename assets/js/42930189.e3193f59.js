(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{126:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return O}));var a=n(0),l=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=l.a.createContext({}),o=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=o(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},s=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,b=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=o(n),s=a,O=u["".concat(b,".").concat(s)]||u[s]||m[s]||i;return n?l.a.createElement(O,r(r({ref:t},c),{},{components:n})):l.a.createElement(O,r({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,b=new Array(i);b[0]=s;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,b[1]=r;for(var c=2;c<i;c++)b[c]=n[c];return l.a.createElement.apply(null,b)}return l.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return o}));var a=n(3),l=n(7),i=(n(0),n(126)),b={id:"doc_dev_api_gameinfo",title:"Game Information",sidebar_label:"Game Information"},r={unversionedId:"doc_dev_api_gameinfo",id:"doc_dev_api_gameinfo",isDocsHomePage:!1,title:"Game Information",description:"Information about the ongoing game is available under the namespaces game, player, weapon, currentWeapon, vehicle, flag, arena, rabbit, and cah.",source:"@site/docs/doc_dev_api_gameinfo.md",slug:"/doc_dev_api_gameinfo",permalink:"/tamods-site/docs/doc_dev_api_gameinfo",editUrl:"https://github.com/mcoot/taserver/edit/master/website/docs/doc_dev_api_gameinfo.md",version:"current",sidebar_label:"Game Information",sidebar:"developer",previous:{title:"Event Handling and I/O",permalink:"/tamods-site/docs/doc_dev_api_events"},next:{title:"User Experience Features",permalink:"/tamods-site/docs/doc_dev_api_ux"}},p=[{value:"Enums",id:"enums",children:[{value:"Team enum",id:"team-enum",children:[]},{value:"EquipPoint enum",id:"equippoint-enum",children:[]},{value:"ReticuleType enum",id:"reticuletype-enum",children:[]}]},{value:"Game",id:"game",children:[]},{value:"Player",id:"player",children:[]},{value:"Weapon",id:"weapon",children:[]},{value:"CurrentWeapon",id:"currentweapon",children:[]},{value:"Vehicle",id:"vehicle",children:[]},{value:"Flag",id:"flag",children:[]},{value:"Arena",id:"arena",children:[]},{value:"Rabbit",id:"rabbit",children:[]},{value:"CaH",id:"cah",children:[]}],c={toc:p};function o(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Information about the ongoing game is available under the namespaces ",Object(i.b)("inlineCode",{parentName:"p"},"game"),", ",Object(i.b)("inlineCode",{parentName:"p"},"player"),", ",Object(i.b)("inlineCode",{parentName:"p"},"weapon"),", ",Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon"),", ",Object(i.b)("inlineCode",{parentName:"p"},"vehicle"),", ",Object(i.b)("inlineCode",{parentName:"p"},"flag"),", ",Object(i.b)("inlineCode",{parentName:"p"},"arena"),", ",Object(i.b)("inlineCode",{parentName:"p"},"rabbit"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"cah"),"."),Object(i.b)("h2",{id:"enums"},"Enums"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"enums")," namespace contains constants and useful enumerations, including the following enumerations of game information values."),Object(i.b)("h3",{id:"team-enum"},"Team enum"),Object(i.b)("p",null,"Enumerates the possible values for a team number."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.TEAM_BLOOD_EAGLE")," = 0"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.TEAM_DIAMOND_SWORD")," = 1"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.TEAM_SPECTATOR")," = 255 - used as a catch-all (for instance, Private Messages are considered to come from the Spectator team)")),Object(i.b)("h3",{id:"equippoint-enum"},"EquipPoint enum"),Object(i.b)("p",null,"Enumerates the possible values for an equipment slot."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_NONE"),"= 0 - null/invalid equipment slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_MELEE")," = 1 - melee slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_PRIMARY")," = 2 - first weapon slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_SECONDARY")," = 3 - second weapon slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_TERTIARY")," = 4 - third weapon slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_QUARTERNARY")," = 5 - fourth weapon slot (no classes currently have a fourth weapon)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_PACK")," = 6 - pack item slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_BELT")," = 7 - belt item slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_DEPLOYABLE")," = 8 - deployed deployable slot"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_LASERTARGET")," = 9 - laser targetter slot  ")),Object(i.b)("h3",{id:"reticuletype-enum"},"ReticuleType enum"),Object(i.b)("p",null,"Enumerates the possible types of reticule / crosshair."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SPINFUSOR")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SMG")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_RIFLE")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_LOCKED_ON")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CROSSBOW")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_FLAMETHROWER")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CHAINGUN")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_THUMPER")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_NANITE")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SHOTGUN")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_UNKNOWN")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_LASER")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CH_V13")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SCOPE")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_PISTOL")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_GRENADE_LAUNCHER")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_MELEE")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SHRIKE")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SPECTATOR")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CHAIN")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_BXT1")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_PHASE")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SAP20")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_PLASMA"))),Object(i.b)("h2",{id:"game"},"Game"),Object(i.b)("p",null,"Provides information about the current on-going game."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.type(): string ")),Object(i.b)("p",null,"Gets the current game type."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.isOfflinePlay(): boolean")),Object(i.b)("p",null,"Returns true if currently in offline play (Roam Map etc.)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.isWarmUp(): boolean")),Object(i.b)("p",null,"Returns true if the game is currently in warm-up."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.isOver(): boolean")),Object(i.b)("p",null,"Returns true if the game has ended."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.time(): integer")),Object(i.b)("p",null,"Gets the time remaining in the game."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.timeLimit(): integer")),Object(i.b)("p",null,"Gets the time limit for the game in seconds (gives elapsed time in training mode)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.overTimeLimit(): integer")),Object(i.b)("p",null,"Gets the time limit for overtime."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.timeStr(): string")),Object(i.b)("p",null,"Gets a formatted string of the current game time."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.timeSeconds(): float")),Object(i.b)("p",null,"Gets the time in seconds since the current game started, not counting game pauses (not terribly relevant to T:A...)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.realTimeSeconds(): float")),Object(i.b)("p",null,"Gets the time in seconds since the current game started."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.score(teamNum: integer): integer")),Object(i.b)("p",null,"Gets the current score for the given team (0 = BE, 1 = DS)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.scoreLimit(): integer")),Object(i.b)("p",null,"Gets the score required to win the game."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.isGenUp(teamNum: integer): boolean")),Object(i.b)("p",null,"Returns true if the given team's generator is up."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.genAutoRepairTime(teamNum: integer): integer")),Object(i.b)("p",null,"Returns the time until the given team's generator auto-repairs (0 if up or auto-repair is off)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.players(): table")),Object(i.b)("p",null,"Gets a Lua table of information about the players in the game, with keys for each possible Team (as per the Team enum described in ",Object(i.b)("a",{parentName:"p",href:"/tamods-site/docs/doc_dev_api_datatypes"},"Data Types"),")."),Object(i.b)("p",null,"Each of the sub-tables contains the following stringkeys:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Key"),Object(i.b)("th",{parentName:"tr",align:null},"Type"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"name"')),Object(i.b)("td",{parentName:"tr",align:null},"string"),Object(i.b)("td",{parentName:"tr",align:null},"Player's name")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"rank"')),Object(i.b)("td",{parentName:"tr",align:null},"integer"),Object(i.b)("td",{parentName:"tr",align:null},"Player's rank")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"class"')),Object(i.b)("td",{parentName:"tr",align:null},"string"),Object(i.b)("td",{parentName:"tr",align:null},"Player's armour class")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"kills"')),Object(i.b)("td",{parentName:"tr",align:null},"integer"),Object(i.b)("td",{parentName:"tr",align:null},"Player's kills")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"assists"')),Object(i.b)("td",{parentName:"tr",align:null},"integer"),Object(i.b)("td",{parentName:"tr",align:null},"Player's assists")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"score"')),Object(i.b)("td",{parentName:"tr",align:null},"integer"),Object(i.b)("td",{parentName:"tr",align:null},"Player's scores (credits earned)")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},'"ping"')),Object(i.b)("td",{parentName:"tr",align:null},"integer"),Object(i.b)("td",{parentName:"tr",align:null},"Player's ping")))),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"game.spectators(): string")),Object(i.b)("p",null,"Gets the list of spectating players as a comma-separated string, with a preceding count."),Object(i.b)("p",null,"Gives a result of the form: ",Object(i.b)("inlineCode",{parentName:"p"},"(3) player1, player2, player3"),"."),Object(i.b)("h2",{id:"player"},"Player"),Object(i.b)("p",null,"Provides information about the player."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.name(): string")),Object(i.b)("p",null,"Gets the current player's name."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.classId(): integer")),Object(i.b)("p",null,"Gets the current player's class: 1 for light, 2 for medium, 3 for heavy"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.ping(): integer")),Object(i.b)("p",null,"Gets the player's ping."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.isFirstPerson(): boolean")),Object(i.b)("p",null,"Returns true if the player is currently viewing in first person."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.isSkiing(): boolean")),Object(i.b)("p",null,"Returns true if the player is currently skiing."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.isVehicle(): boolean")),Object(i.b)("p",null,"Returns true if the player is currently in a vehicle."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.teamNum(): Team")),Object(i.b)("p",null,"Get the player's team (see the Team enum definition)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.kills(): integer")),Object(i.b)("p",null,"Gets the player's kills."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.assists(): integer")),Object(i.b)("p",null,"Gets the player's assists."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.deaths(): integer")),Object(i.b)("p",null,"Gets the player's deaths."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.score(): integer")),Object(i.b)("p",null,"Gets the player's current score (total credits earned). In Rabbit this gives the Rabbit score."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.credits(): integer")),Object(i.b)("p",null,"Gets the player's current credits. In OOTB this will be the same as score, since you cannot spend credits in that mode."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.arenaSpawnsLeft(): integer")),Object(i.b)("p",null,"Gets the number of spawns the player has left in the Arena game type."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.rabbitRank(): integer")),Object(i.b)("p",null,"Gets the player's rank in the Rabbit game type."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.isAlive(): boolean")),Object(i.b)("p",null,"Returns true if the player is currently alive."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.respawnTime(): integer")),Object(i.b)("p",null,"Gets the number of seconds left until respawn (0 if player is alive)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.health(): integer")),Object(i.b)("p",null,"Get the player's current health."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.healthMax(): integer")),Object(i.b)("p",null,"Get the player's maximum health."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.energy(): float")),Object(i.b)("p",null,"Get the player's current energy."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.energyMax(): float")),Object(i.b)("p",null,"Get the player's maximum energy."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.energyPct(): float")),Object(i.b)("p",null,"Get the player's energy as a percentage of the maximum."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.speed(): integer")),Object(i.b)("p",null,"Get the player's current speed."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.numDeployables(): integer")),Object(i.b)("p",null,"Get the number of deployables the player has currently deployed."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.numMines(): integer")),Object(i.b)("p",null,"Get the number of mines the player has currently deployed."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.isShielded(): boolean")),Object(i.b)("p",null,"Returns true if the player is currently shielded."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.isRaged(): boolean")),Object(i.b)("p",null,"Returns true if the player has rage."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"player.hasFlag(): boolean")),Object(i.b)("p",null,"Returns true if the player has the flag."),Object(i.b)("h2",{id:"weapon"},"Weapon"),Object(i.b)("p",null,"Provides information about the player's weapon loadout."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.name(eqp: EquipPoint): string")),Object(i.b)("p",null,"Returns the name of the weapon equipped at EquipPoint ",Object(i.b)("inlineCode",{parentName:"p"},"eqp")," (see the EquipPoint enum definition)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.itemId(eqp: EquipPoint): int")),Object(i.b)("p",null,"Gets the Item ID for the weapon at ",Object(i.b)("inlineCode",{parentName:"p"},"eqp"),"."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.isPack(eqp: EquipPoint): boolean")),Object(i.b)("p",null,"Returns true if the weapon at ",Object(i.b)("inlineCode",{parentName:"p"},"eqp")," is a pack item."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.isReadyToFire(eqp: EquipPoint): boolean")),Object(i.b)("p",null,"Returns true if the weapon is currently ready to fire."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.isReloading(eqp: EquipPoint): boolean")),Object(i.b)("p",null,"Returns true if the weapon is currently reloading."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.isPassiveReady(eqp: EquipPoint): boolean")),Object(i.b)("p",null,"Returns true if the weapon has passively reloaded."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.isLowAmmo(eqp: EquipPoint): boolean")),Object(i.b)("p",null,"Returns true if the weapon is low on ammo."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.accuracy(eqp: EquipPoint): float")),Object(i.b)("p",null,"Returns the current accuracy value for the weapon (as affected by e.g. spread)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.reloadTime(eqp: EquipPoint): float")),Object(i.b)("p",null,"Gets the reload time of the weapon (in seconds), if reloaded partway through a clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.reloadTimeFull(eqp: EquipPoint): float")),Object(i.b)("p",null,"Gets the reload time of the weapon (in seconds), if reloaded at the end of a clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.ammo(eqp: EquipPoint): integer")),Object(i.b)("p",null,"Gets the amount of ammo left in the clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.ammoMax(eqp: EquipPoint): integer")),Object(i.b)("p",null,"Gets the total size of the clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.ammoCarried(eqp: EquipPoint): integer")),Object(i.b)("p",null,"Gets the amount of spare ammo, not including the current clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.ammoMaxCarried(eqp: EquipPoint): integer")),Object(i.b)("p",null,"Gets the maximum amount of spare ammo, not including the initial full clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"weapon.ammoTotal(eqp: EquipPoint): integer")),Object(i.b)("p",null,"Gets the total amount of current ammo, including the current clip and spare ammo."),Object(i.b)("h2",{id:"currentweapon"},"CurrentWeapon"),Object(i.b)("p",null,"Provides information about the weapon the player is currently using."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.name(): string")),Object(i.b)("p",null,"Gets the current weapon's name."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.itemId(): int")),Object(i.b)("p",null,"Gets the Item ID for the current weapon."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.equippedAt(): EquipPoint")),Object(i.b)("p",null,"Get the equip point of the current weapon."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.reticuleIndex(): ReticuleType")),Object(i.b)("p",null,"Gets the reticule type for the current weapon (see the ReticuleType enum definition)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.isZoomed(): boolean")),Object(i.b)("p",null,"Returns true if the player is currently zoomed in with their weapon."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.isPack(): boolean")),Object(i.b)("p",null,"Returns true if the current weapon is a pack item."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeaponpon.accuracy(): float")),Object(i.b)("p",null,"Returns the current accuracy value for the current weapon (as affected by e.g. spread)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.reloadTime(): float")),Object(i.b)("p",null,"Get the reload time (in seconds), if the weapon is reloaded partway through a clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.reloadTimeFull(): float")),Object(i.b)("p",null,"Get the reload time (in seconds), if the weapon is reloaded at the end of a clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.isReadyToFire(): boolean")),Object(i.b)("p",null,"Returns true if the weapon is finished reloading and is ready to fire."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.isReloading(): boolean")),Object(i.b)("p",null,"Returns true if the weapon is currently reloading."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.isReloaded(): boolean")),Object(i.b)("p",null,"Returns true if the weapon has completed reloading. Note that for many weapons this happens ",Object(i.b)("em",{parentName:"p"},"before")," the end of the animation (when the weapon becomes Ready To Fire). If ",Object(i.b)("inlineCode",{parentName:"p"},"isReloaded()")," is true but ",Object(i.b)("inlineCode",{parentName:"p"},"isReadyToFire()")," is false, then the weapon can be reload-cancelled."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.isLowAmmo(): boolean")),Object(i.b)("p",null,"Returns true if the weapon is low on ammo."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.ammo(): integer")),Object(i.b)("p",null,"Gets the amount of ammo left in the clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.ammoMax(): integer")),Object(i.b)("p",null,"Gets the total size of the clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.ammoCarried(): integer")),Object(i.b)("p",null,"Gets the amount of spare ammo, not including the current clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.ammoMaxCarried(): integer")),Object(i.b)("p",null,"Gets the maximum amount of spare ammo, not including the initial full clip."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.ammoTotal(): integer")),Object(i.b)("p",null,"Gets the total amount of current ammo, including the current clip and spare ammo."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.sniperChargePct(): float")),Object(i.b)("p",null,"If the current weapon is a sniper rifle (BXT1, BXT1A, Phase Rifle or SAP20), get the proportion of BXT charge or energy charge for phase."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.laserTargeterChargePct(): float")),Object(i.b)("p",null,"If the current weapon is the laser targeter, gets the current call-in buildup as a proportion between 0 and 1. Otherwise returns 0."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"currentWeapon.sniperDamage(): float")),Object(i.b)("p",null,"If the current weapon is a sniper rifle (BXT1, BXT1A, Phase Rifle or SAP20), get the damage that would be done if fired right now, with respect to charge/energy."),Object(i.b)("h2",{id:"vehicle"},"Vehicle"),Object(i.b)("p",null,"Provides information about the vehicle the player is currently piloting. Will not provide useful information if the player is not in a vehicle."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.name(): string")),Object(i.b)("p",null,"Gets the name of the current vehicle (",Object(i.b)("inlineCode",{parentName:"p"},'"Grav Cycle"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"Beowulf"'),", or ",Object(i.b)("inlineCode",{parentName:"p"},'"Shrike"'),")."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.seatName(): string")),Object(i.b)("p",null,"Gets the name of the seat in the vehicle the player is occupying (",Object(i.b)("inlineCode",{parentName:"p"},'"Pilot"'),", ",Object(i.b)("inlineCode",{parentName:"p"},'"Gunner"'),", or ",Object(i.b)("inlineCode",{parentName:"p"},'"Passenger"'),")."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.seatIndex(): string")),Object(i.b)("p",null,"Gets the index number of the seat the player is occupying."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.seatCount(): int")),Object(i.b)("p",null,"Gets the number of seats the vehicle has."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.health(): integer")),Object(i.b)("p",null,"Gets the current health of the vehicle."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.healthMax(): integer")),Object(i.b)("p",null,"Gets the maximum health of the vehicle."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.energyPct(): float")),Object(i.b)("p",null,"Gets the vehicle's current energy as a percentage of the total."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.ammo(): integer")),Object(i.b)("p",null,"Gets the amount of ammo the vehicle's weapon currently has."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.ammoMax(): integer")),Object(i.b)("p",null,"Gets the maximum ammo for the vehicle."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"vehicle.speed(): integer")),Object(i.b)("p",null,"Gets the vehicle's current speed."),Object(i.b)("h2",{id:"flag"},"Flag"),Object(i.b)("p",null,"Provides information about the flag in CTF."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"flag.isHome(teamNum: Team): boolean")),Object(i.b)("p",null,"Returns true if the given team's flag is currently on its stand."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"flag.returnTime(teamNum: Team): integer")),Object(i.b)("p",null,"Gets the number of seconds before the flag returns (",Object(i.b)("inlineCode",{parentName:"p"},"0")," if flag is not loose in field)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"flag.holderName(teamNum: Team): string")),Object(i.b)("p",null,"Gets the name of the player holding the given team's flag (",Object(i.b)("inlineCode",{parentName:"p"},'""')," if the flag is not being held)."),Object(i.b)("h2",{id:"arena"},"Arena"),Object(i.b)("p",null,"Provides Arena-specific game information."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"arena.round(): integer")),Object(i.b)("p",null,"Gets the current round number."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"arena.roundScore(teamNum: Team): integer")),Object(i.b)("p",null,"Gets the number of lives the given team has left for this round."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"arena.playerStatus(teamNum: Team, playerNum: integer): integer")),Object(i.b)("p",null,"Gets a bitmask indicating status of the given player index on the given team."),Object(i.b)("h5",{id:"bit-mask-specification"},"Bit mask specification"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Bit Position"),Object(i.b)("th",{parentName:"tr",align:null},"Binary mask (least significant bits)"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"1"),"s place"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"0001")),Object(i.b)("td",{parentName:"tr",align:null},"Bit on if player exists")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"2"),"s place"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"0010")),Object(i.b)("td",{parentName:"tr",align:null},"Bit on if player is alive")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"4"),"s place"),Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"0100")),Object(i.b)("td",{parentName:"tr",align:null},"Bit on if player has spawns left")))),Object(i.b)("h5",{id:"possible-values"},"Possible values"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Value"),Object(i.b)("th",{parentName:"tr",align:null},"Description"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"0 = 0b0000")),Object(i.b)("td",{parentName:"tr",align:null},"Player does not exist")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"1 = 0b0001")),Object(i.b)("td",{parentName:"tr",align:null},"Player exists, is not alive, has no spawns")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"3 = 0b0011")),Object(i.b)("td",{parentName:"tr",align:null},"Player exists, is alive, has no spawns")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"5 = 0b0101")),Object(i.b)("td",{parentName:"tr",align:null},"Player exists, is not alive, has spawns")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},Object(i.b)("inlineCode",{parentName:"td"},"7 = 0b0111")),Object(i.b)("td",{parentName:"tr",align:null},"Player exists, is alive, has spawns")))),Object(i.b)("h2",{id:"rabbit"},"Rabbit"),Object(i.b)("p",null,"Provides Rabbit-specific game information. Note that in the Rabbit game mode, ",Object(i.b)("inlineCode",{parentName:"p"},"player.score()")," will return the current player's Rabbit points."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"rabbit.rabbitName(): string")),Object(i.b)("p",null,"Gets the name of the current rabbit."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"rabbit.leaderBoardScore(position: integer): integer")),Object(i.b)("p",null,"Gets the score of one of the players on the rabbit scoreboard. ",Object(i.b)("inlineCode",{parentName:"p"},"position")," must be ",Object(i.b)("inlineCode",{parentName:"p"},"0")," (first place), ",Object(i.b)("inlineCode",{parentName:"p"},"1")," (second place), or ",Object(i.b)("inlineCode",{parentName:"p"},"2")," (third place)."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"rabbit.leaderBoardName(position: integer): string")),Object(i.b)("p",null,"Gets the name of the player at ",Object(i.b)("inlineCode",{parentName:"p"},"position")," on the rabbit scoreboard."),Object(i.b)("h2",{id:"cah"},"CaH"),Object(i.b)("p",null,"Provides Capture and Hold-specific game information."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"cah.pointsNum(): integer")),Object(i.b)("p",null,"Gets the number of control points on the current map."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"cah.pointsHeld(teamNum: Team): integer")),Object(i.b)("p",null,"Gets the number of control points held by the given team."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"cah.pointHolder(pointIndex: integer): Team")),Object(i.b)("p",null,"Gets the team which holds the point with the given index."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"cah.pointLabel(pointIndex: integer): character")),Object(i.b)("p",null,"Gets the single-character label (",Object(i.b)("inlineCode",{parentName:"p"},"'A'"),", ",Object(i.b)("inlineCode",{parentName:"p"},"'B'")," etc.) for the point with the given index."))}o.isMDXComponent=!0}}]);