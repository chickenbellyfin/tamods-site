(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{126:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return O}));var a=n(0),r=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},s=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),s=a,O=u["".concat(o,".").concat(s)]||u[s]||d[s]||l;return n?r.a.createElement(O,b(b({ref:t},c),{},{components:n})):r.a.createElement(O,b({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=s;var b={};for(var i in t)hasOwnProperty.call(t,i)&&(b[i]=t[i]);b.originalType=e,b.mdxType="string"==typeof e?e:a,o[1]=b;for(var c=2;c<l;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return b})),n.d(t,"toc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),l=(n(0),n(126)),o={id:"doc_dev_api_routes",title:"Capping and Route Recording",sidebar_label:"Capping and Route Recording"},b={unversionedId:"doc_dev_api_routes",id:"doc_dev_api_routes",isDocsHomePage:!1,title:"Capping and Route Recording",description:"Stopwatch",source:"@site/docs/doc_dev_api_routes.md",slug:"/doc_dev_api_routes",permalink:"https://www.tamods.org/docs/doc_dev_api_routes",editUrl:"https://github.com/mcoot/taserver/edit/master/website/docs/doc_dev_api_routes.md",version:"current",sidebar_label:"Capping and Route Recording",sidebar:"developer",previous:{title:"Model and Projectile Modification",permalink:"https://www.tamods.org/docs/doc_dev_api_model_proj"},next:{title:"Drawing",permalink:"https://www.tamods.org/docs/doc_dev_api_drawing"}},i=[{value:"Stopwatch",id:"stopwatch",children:[]},{value:"State Saving",id:"state-saving",children:[]},{value:"Route Recording",id:"route-recording",children:[]}],c={toc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"stopwatch"},"Stopwatch"),Object(l.b)("p",null,"TAMods offers a built-in stopwatch feature, useful for timing capping routes."),Object(l.b)("h4",{id:"configuration-variables"},"Configuration Variables"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"stopwatchStopOnCap")),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the stopwatch should stop when the flag is capped")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"stopwatchStopOnDeath")),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the stopwatch should stop when the player dies")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"stopwatchNotifications")),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether to show dropdown notifications for the stopwatch on flag pickup etc.")))),Object(l.b)("h4",{id:"functions"},"Functions"),Object(l.b)("p",null,"These functions in the ",Object(l.b)("inlineCode",{parentName:"p"},"stopwatch")," namespace correspond to console commands, accessible via the Lua API to allow for keybinding."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"stopwatch.start()")),Object(l.b)("p",null,"Start (and reset) the stopwatch."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"stopwatch.stop()")),Object(l.b)("p",null,"End the stopwatch."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"stopwatch.toggle()")),Object(l.b)("p",null,"Start the stopwatch if it is stopped; stop it otherwise."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"stopwatch.isRunning(): boolean")),Object(l.b)("p",null,"Returns true if the stopwatch is running."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"stopwatch.time(): float")),Object(l.b)("p",null,"Get the time on the stopwatch in seconds."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"stopwatch.timeStr(): string")),Object(l.b)("p",null,"Get the time on the stopwatch as a formatted string."),Object(l.b)("h2",{id:"state-saving"},"State Saving"),Object(l.b)("p",null,"The state functions allow for the saving of specific locations on the map, and recalling / teleporting to them (in roam map only)."),Object(l.b)("h4",{id:"configuration-variables-1"},"Configuration Variables"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"showSavedLocations")),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether to display markers for saved state locations in roam map")))),Object(l.b)("h4",{id:"functions-1"},"Functions"),Object(l.b)("p",null,"These functions in the ",Object(l.b)("inlineCode",{parentName:"p"},"state")," namespace correspond to console commands, accessible via the Lua API to allow for keybinding."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.save()")),Object(l.b)("p",null,"Save the current player position into the default (first) save slot."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.saveTo(slot: integer)")),Object(l.b)("p",null,"Save the current player position into the given slot (",Object(l.b)("inlineCode",{parentName:"p"},"1 <= slot <= 9"),")."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.tp()")),Object(l.b)("p",null,"Teleport to the default (first) saved state, restoring position only, and refilling health and ammo."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.tpTo(slot: integer)")),Object(l.b)("p",null,"Teleport to the given saved state, restoring position only, and refilling health and ammo."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.recall()")),Object(l.b)("p",null,"Recall to the default (first) saved state, restoring not just position but complete state at that time (e.g. health, energy, velocity, flag status)."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.recallTo(slot: integer)")),Object(l.b)("p",null,"Recall to the given saved state, restoring not just position but complete state at that time (e.g. health, energy, velocity, flag status)."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.reset()")),Object(l.b)("p",null,"Remove all saved states."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"state.setToSpawns()")),Object(l.b)("p",null,"Set saved states to the team's spawn locations."),Object(l.b)("h2",{id:"route-recording"},"Route Recording"),Object(l.b)("h4",{id:"configuration-variables-2"},"Configuration Variables"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"routeDrawInterval")),Object(l.b)("td",{parentName:"tr",align:null},"integer"),Object(l.b)("td",{parentName:"tr",align:null},"500"),Object(l.b)("td",{parentName:"tr",align:null},"How frequently to draw markers on recorded routes, in milliseconds")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"routeDrawETAInterval")),Object(l.b)("td",{parentName:"tr",align:null},"integer"),Object(l.b)("td",{parentName:"tr",align:null},"5"),Object(l.b)("td",{parentName:"tr",align:null},"How frequently to draw route times, in seconds")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"routeDrawTransparency")),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"0.8"),Object(l.b)("td",{parentName:"tr",align:null},"The transparency of route markers")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"routeReplayRotation")),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether to rotation the player/bot view during route replay")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("inlineCode",{parentName:"td"},"routeCinematicMode")),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether to adjust route replay to be smoother")))),Object(l.b)("h4",{id:"functions-2"},"Functions"),Object(l.b)("p",null,"These functions in the ",Object(l.b)("inlineCode",{parentName:"p"},"route")," namespace correspond to console commands, accessible via the Lua API to allow for keybinding."),Object(l.b)("h5",{id:"recording"},"Recording"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.record()")),Object(l.b)("p",null,"Toggle route recording (aliased to ",Object(l.b)("inlineCode",{parentName:"p"},"route.rec()"),")."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.recStart()")),Object(l.b)("p",null,"Start route recording."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.recStop()")),Object(l.b)("p",null,"End route recording."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.reset()")),Object(l.b)("p",null,"Reset the current route. Stops any on-going recording."),Object(l.b)("h5",{id:"replay"},"Replay"),Object(l.b)("p",null,"Route replay is only available in roam map."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.replay()")),Object(l.b)("p",null,"Toggle in-game replay of the current route."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.replayStart(startTime: float)")),Object(l.b)("p",null,"Start in-game replay of the current route at the given time in the route."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.replayStop()")),Object(l.b)("p",null,"Stop replay of the current route."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.enableBot(on: boolean)")),Object(l.b)("p",null,"Enable or disable bot replay. If bot replay is off, replaying a route will replay from the player's perspective."),Object(l.b)("h5",{id:"loading--saving"},"Loading / Saving"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.getAll()")),Object(l.b)("p",null,"Load all route files for the current map into the game."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.getTeam()")),Object(l.b)("p",null,"Load only route files for the player's current team on the current map."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.getEnemy()")),Object(l.b)("p",null,"Load only route file for the opposing team on the current map."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.getTable(): List<string>")),Object(l.b)("p",null,"Get a Lua table containing all currently loaded route names (in the form of a 0-indexed list)."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.save(description: string)")),Object(l.b)("p",null,"Save the current route, with the given route name / description. Details about the map, team, player class, player name, route length etc. will be automatically saved."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.load(routeNumber: integer)")),Object(l.b)("p",null,"Set the current route to the given numbered route in the listings for the current map."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.find(regex: string)")),Object(l.b)("p",null,"Find loaded routes matching the given regex, and print them to the console. Aliased to ",Object(l.b)("inlineCode",{parentName:"p"},"route.search(regex: string)"),"."),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"route.list()")),Object(l.b)("p",null,"List all loaded routes to the console."))}p.isMDXComponent=!0}}]);