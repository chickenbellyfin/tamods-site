"use strict";(self.webpackChunktamods_site=self.webpackChunktamods_site||[]).push([[5811],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),d=u(n),k=l,c=d["".concat(o,".").concat(k)]||d[k]||s[k]||i;return n?a.createElement(c,r(r({ref:t},m),{},{components:n})):a.createElement(c,r({ref:t},m))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,r[1]=p;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9689:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return u},toc:function(){return m},default:function(){return d}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],p={id:"doc_dev_api_gameinfo",title:"Game Information",sidebar_label:"Game Information",sidebar_position:4},o=void 0,u={unversionedId:"developer/api/doc_dev_api_gameinfo",id:"developer/api/doc_dev_api_gameinfo",isDocsHomePage:!1,title:"Game Information",description:"Information about the ongoing game is available under the namespaces game, player, weapon, currentWeapon, vehicle, flag, arena, rabbit, and cah.",source:"@site/docs/developer/api/doc_dev_api_gameinfo.md",sourceDirName:"developer/api",slug:"/developer/api/doc_dev_api_gameinfo",permalink:"/docs/developer/api/doc_dev_api_gameinfo",editUrl:"https://github.com/mcoot/tamods-site/tree/master/docs/developer/api/doc_dev_api_gameinfo.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"doc_dev_api_gameinfo",title:"Game Information",sidebar_label:"Game Information",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Event Handling and I/O",permalink:"/docs/developer/api/doc_dev_api_events"},next:{title:"User Experience Features",permalink:"/docs/developer/api/doc_dev_api_ux"}},m=[{value:"Enums",id:"enums",children:[{value:"Team enum",id:"team-enum",children:[],level:3},{value:"EquipPoint enum",id:"equippoint-enum",children:[],level:3},{value:"ReticuleType enum",id:"reticuletype-enum",children:[],level:3}],level:2},{value:"Game",id:"game",children:[],level:2},{value:"Player",id:"player",children:[],level:2},{value:"Weapon",id:"weapon",children:[],level:2},{value:"CurrentWeapon",id:"currentweapon",children:[],level:2},{value:"Vehicle",id:"vehicle",children:[],level:2},{value:"Flag",id:"flag",children:[],level:2},{value:"Arena",id:"arena",children:[{value:"Bit mask specification",id:"bit-mask-specification",children:[],level:5},{value:"Possible values",id:"possible-values",children:[],level:5}],level:2},{value:"Rabbit",id:"rabbit",children:[],level:2},{value:"CaH",id:"cah",children:[],level:2}],s={toc:m};function d(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Information about the ongoing game is available under the namespaces ",(0,i.kt)("inlineCode",{parentName:"p"},"game"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"player"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"weapon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"vehicle"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"flag"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"arena"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"rabbit"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"cah"),"."),(0,i.kt)("h2",{id:"enums"},"Enums"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"enums")," namespace contains constants and useful enumerations, including the following enumerations of game information values."),(0,i.kt)("h3",{id:"team-enum"},"Team enum"),(0,i.kt)("p",null,"Enumerates the possible values for a team number."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.TEAM_BLOOD_EAGLE")," = 0"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.TEAM_DIAMOND_SWORD")," = 1"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.TEAM_SPECTATOR")," = 255 - used as a catch-all (for instance, Private Messages are considered to come from the Spectator team)")),(0,i.kt)("h3",{id:"equippoint-enum"},"EquipPoint enum"),(0,i.kt)("p",null,"Enumerates the possible values for an equipment slot."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_NONE"),"= 0 - null/invalid equipment slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_MELEE")," = 1 - melee slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_PRIMARY")," = 2 - first weapon slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_SECONDARY")," = 3 - second weapon slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_TERTIARY")," = 4 - third weapon slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_QUARTERNARY")," = 5 - fourth weapon slot (no classes currently have a fourth weapon)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_PACK")," = 6 - pack item slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_BELT")," = 7 - belt item slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_DEPLOYABLE")," = 8 - deployed deployable slot"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.EQUIPMENT_LASERTARGET")," = 9 - laser targetter slot  ")),(0,i.kt)("h3",{id:"reticuletype-enum"},"ReticuleType enum"),(0,i.kt)("p",null,"Enumerates the possible types of reticule / crosshair."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SPINFUSOR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SMG")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_RIFLE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_LOCKED_ON")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CROSSBOW")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_FLAMETHROWER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CHAINGUN")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_THUMPER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_NANITE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SHOTGUN")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_UNKNOWN")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_LASER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CH_V13")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SCOPE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_PISTOL")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_GRENADE_LAUNCHER")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_MELEE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SHRIKE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SPECTATOR")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_CHAIN")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_BXT1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_PHASE")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_SAP20")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enums.RETICULE_TYPE_PLASMA"))),(0,i.kt)("h2",{id:"game"},"Game"),(0,i.kt)("p",null,"Provides information about the current on-going game."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.type(): string ")),(0,i.kt)("p",null,"Gets the current game type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.isOfflinePlay(): boolean")),(0,i.kt)("p",null,"Returns true if currently in offline play (Roam Map etc.)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.isWarmUp(): boolean")),(0,i.kt)("p",null,"Returns true if the game is currently in warm-up."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.isOver(): boolean")),(0,i.kt)("p",null,"Returns true if the game has ended."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.time(): integer")),(0,i.kt)("p",null,"Gets the time remaining in the game."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.timeLimit(): integer")),(0,i.kt)("p",null,"Gets the time limit for the game in seconds (gives elapsed time in training mode)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.overTimeLimit(): integer")),(0,i.kt)("p",null,"Gets the time limit for overtime."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.timeStr(): string")),(0,i.kt)("p",null,"Gets a formatted string of the current game time."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.timeSeconds(): float")),(0,i.kt)("p",null,"Gets the time in seconds since the current game started, not counting game pauses (not terribly relevant to T:A...)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.realTimeSeconds(): float")),(0,i.kt)("p",null,"Gets the time in seconds since the current game started."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.score(teamNum: integer): integer")),(0,i.kt)("p",null,"Gets the current score for the given team (0 = BE, 1 = DS)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.scoreLimit(): integer")),(0,i.kt)("p",null,"Gets the score required to win the game."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.isGenUp(teamNum: integer): boolean")),(0,i.kt)("p",null,"Returns true if the given team's generator is up."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.genAutoRepairTime(teamNum: integer): integer")),(0,i.kt)("p",null,"Returns the time until the given team's generator auto-repairs (0 if up or auto-repair is off)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.players(): table")),(0,i.kt)("p",null,"Gets a Lua table of information about the players in the game, with keys for each possible Team (as per the Team enum described in ",(0,i.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_datatypes"},"Data Types"),")."),(0,i.kt)("p",null,"Each of the sub-tables contains the following stringkeys:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Type"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"name"')),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's name")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"rank"')),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's rank")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"class"')),(0,i.kt)("td",{parentName:"tr",align:null},"string"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's armour class")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"kills"')),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's kills")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"assists"')),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's assists")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"score"')),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's scores (credits earned)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"ping"')),(0,i.kt)("td",{parentName:"tr",align:null},"integer"),(0,i.kt)("td",{parentName:"tr",align:null},"Player's ping")))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"game.spectators(): string")),(0,i.kt)("p",null,"Gets the list of spectating players as a comma-separated string, with a preceding count."),(0,i.kt)("p",null,"Gives a result of the form: ",(0,i.kt)("inlineCode",{parentName:"p"},"(3) player1, player2, player3"),"."),(0,i.kt)("h2",{id:"player"},"Player"),(0,i.kt)("p",null,"Provides information about the player."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.name(): string")),(0,i.kt)("p",null,"Gets the current player's name."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.classId(): integer")),(0,i.kt)("p",null,"Gets the current player's class: 1 for light, 2 for medium, 3 for heavy"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.ping(): integer")),(0,i.kt)("p",null,"Gets the player's ping."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.isFirstPerson(): boolean")),(0,i.kt)("p",null,"Returns true if the player is currently viewing in first person."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.isSkiing(): boolean")),(0,i.kt)("p",null,"Returns true if the player is currently skiing."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.isVehicle(): boolean")),(0,i.kt)("p",null,"Returns true if the player is currently in a vehicle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.teamNum(): Team")),(0,i.kt)("p",null,"Get the player's team (see the Team enum definition)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.kills(): integer")),(0,i.kt)("p",null,"Gets the player's kills."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.assists(): integer")),(0,i.kt)("p",null,"Gets the player's assists."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.deaths(): integer")),(0,i.kt)("p",null,"Gets the player's deaths."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.score(): integer")),(0,i.kt)("p",null,"Gets the player's current score (total credits earned). In Rabbit this gives the Rabbit score."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.credits(): integer")),(0,i.kt)("p",null,"Gets the player's current credits. In OOTB this will be the same as score, since you cannot spend credits in that mode."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.arenaSpawnsLeft(): integer")),(0,i.kt)("p",null,"Gets the number of spawns the player has left in the Arena game type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.rabbitRank(): integer")),(0,i.kt)("p",null,"Gets the player's rank in the Rabbit game type."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.isAlive(): boolean")),(0,i.kt)("p",null,"Returns true if the player is currently alive."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.respawnTime(): integer")),(0,i.kt)("p",null,"Gets the number of seconds left until respawn (0 if player is alive)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.health(): integer")),(0,i.kt)("p",null,"Get the player's current health."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.healthMax(): integer")),(0,i.kt)("p",null,"Get the player's maximum health."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.energy(): float")),(0,i.kt)("p",null,"Get the player's current energy."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.energyMax(): float")),(0,i.kt)("p",null,"Get the player's maximum energy."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.energyPct(): float")),(0,i.kt)("p",null,"Get the player's energy as a percentage of the maximum."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.speed(): integer")),(0,i.kt)("p",null,"Get the player's current speed."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.numDeployables(): integer")),(0,i.kt)("p",null,"Get the number of deployables the player has currently deployed."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.numMines(): integer")),(0,i.kt)("p",null,"Get the number of mines the player has currently deployed."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.isShielded(): boolean")),(0,i.kt)("p",null,"Returns true if the player is currently shielded."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.isRaged(): boolean")),(0,i.kt)("p",null,"Returns true if the player has rage."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"player.hasFlag(): boolean")),(0,i.kt)("p",null,"Returns true if the player has the flag."),(0,i.kt)("h2",{id:"weapon"},"Weapon"),(0,i.kt)("p",null,"Provides information about the player's weapon loadout."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.name(eqp: EquipPoint): string")),(0,i.kt)("p",null,"Returns the name of the weapon equipped at EquipPoint ",(0,i.kt)("inlineCode",{parentName:"p"},"eqp")," (see the EquipPoint enum definition)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.itemId(eqp: EquipPoint): int")),(0,i.kt)("p",null,"Gets the Item ID for the weapon at ",(0,i.kt)("inlineCode",{parentName:"p"},"eqp"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.isPack(eqp: EquipPoint): boolean")),(0,i.kt)("p",null,"Returns true if the weapon at ",(0,i.kt)("inlineCode",{parentName:"p"},"eqp")," is a pack item."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.isReadyToFire(eqp: EquipPoint): boolean")),(0,i.kt)("p",null,"Returns true if the weapon is currently ready to fire."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.isReloading(eqp: EquipPoint): boolean")),(0,i.kt)("p",null,"Returns true if the weapon is currently reloading."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.isPassiveReady(eqp: EquipPoint): boolean")),(0,i.kt)("p",null,"Returns true if the weapon has passively reloaded."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.isLowAmmo(eqp: EquipPoint): boolean")),(0,i.kt)("p",null,"Returns true if the weapon is low on ammo."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.accuracy(eqp: EquipPoint): float")),(0,i.kt)("p",null,"Returns the current accuracy value for the weapon (as affected by e.g. spread)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.reloadTime(eqp: EquipPoint): float")),(0,i.kt)("p",null,"Gets the reload time of the weapon (in seconds), if reloaded partway through a clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.reloadTimeFull(eqp: EquipPoint): float")),(0,i.kt)("p",null,"Gets the reload time of the weapon (in seconds), if reloaded at the end of a clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.ammo(eqp: EquipPoint): integer")),(0,i.kt)("p",null,"Gets the amount of ammo left in the clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.ammoMax(eqp: EquipPoint): integer")),(0,i.kt)("p",null,"Gets the total size of the clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.ammoCarried(eqp: EquipPoint): integer")),(0,i.kt)("p",null,"Gets the amount of spare ammo, not including the current clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.ammoMaxCarried(eqp: EquipPoint): integer")),(0,i.kt)("p",null,"Gets the maximum amount of spare ammo, not including the initial full clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"weapon.ammoTotal(eqp: EquipPoint): integer")),(0,i.kt)("p",null,"Gets the total amount of current ammo, including the current clip and spare ammo."),(0,i.kt)("h2",{id:"currentweapon"},"CurrentWeapon"),(0,i.kt)("p",null,"Provides information about the weapon the player is currently using."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.name(): string")),(0,i.kt)("p",null,"Gets the current weapon's name."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.itemId(): int")),(0,i.kt)("p",null,"Gets the Item ID for the current weapon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.equippedAt(): EquipPoint")),(0,i.kt)("p",null,"Get the equip point of the current weapon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.reticuleIndex(): ReticuleType")),(0,i.kt)("p",null,"Gets the reticule type for the current weapon (see the ReticuleType enum definition)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.isZoomed(): boolean")),(0,i.kt)("p",null,"Returns true if the player is currently zoomed in with their weapon."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.isPack(): boolean")),(0,i.kt)("p",null,"Returns true if the current weapon is a pack item."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeaponpon.accuracy(): float")),(0,i.kt)("p",null,"Returns the current accuracy value for the current weapon (as affected by e.g. spread)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.reloadTime(): float")),(0,i.kt)("p",null,"Get the reload time (in seconds), if the weapon is reloaded partway through a clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.reloadTimeFull(): float")),(0,i.kt)("p",null,"Get the reload time (in seconds), if the weapon is reloaded at the end of a clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.isReadyToFire(): boolean")),(0,i.kt)("p",null,"Returns true if the weapon is finished reloading and is ready to fire."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.isReloading(): boolean")),(0,i.kt)("p",null,"Returns true if the weapon is currently reloading."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.isReloaded(): boolean")),(0,i.kt)("p",null,"Returns true if the weapon has completed reloading. Note that for many weapons this happens ",(0,i.kt)("em",{parentName:"p"},"before")," the end of the animation (when the weapon becomes Ready To Fire). If ",(0,i.kt)("inlineCode",{parentName:"p"},"isReloaded()")," is true but ",(0,i.kt)("inlineCode",{parentName:"p"},"isReadyToFire()")," is false, then the weapon can be reload-cancelled."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.isLowAmmo(): boolean")),(0,i.kt)("p",null,"Returns true if the weapon is low on ammo."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.ammo(): integer")),(0,i.kt)("p",null,"Gets the amount of ammo left in the clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.ammoMax(): integer")),(0,i.kt)("p",null,"Gets the total size of the clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.ammoCarried(): integer")),(0,i.kt)("p",null,"Gets the amount of spare ammo, not including the current clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.ammoMaxCarried(): integer")),(0,i.kt)("p",null,"Gets the maximum amount of spare ammo, not including the initial full clip."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.ammoTotal(): integer")),(0,i.kt)("p",null,"Gets the total amount of current ammo, including the current clip and spare ammo."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.sniperChargePct(): float")),(0,i.kt)("p",null,"If the current weapon is a sniper rifle (BXT1, BXT1A, Phase Rifle or SAP20), get the proportion of BXT charge or energy charge for phase."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.laserTargeterChargePct(): float")),(0,i.kt)("p",null,"If the current weapon is the laser targeter, gets the current call-in buildup as a proportion between 0 and 1. Otherwise returns 0."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"currentWeapon.sniperDamage(): float")),(0,i.kt)("p",null,"If the current weapon is a sniper rifle (BXT1, BXT1A, Phase Rifle or SAP20), get the damage that would be done if fired right now, with respect to charge/energy."),(0,i.kt)("h2",{id:"vehicle"},"Vehicle"),(0,i.kt)("p",null,"Provides information about the vehicle the player is currently piloting. Will not provide useful information if the player is not in a vehicle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.name(): string")),(0,i.kt)("p",null,"Gets the name of the current vehicle (",(0,i.kt)("inlineCode",{parentName:"p"},'"Grav Cycle"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"Beowulf"'),", or ",(0,i.kt)("inlineCode",{parentName:"p"},'"Shrike"'),")."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.seatName(): string")),(0,i.kt)("p",null,"Gets the name of the seat in the vehicle the player is occupying (",(0,i.kt)("inlineCode",{parentName:"p"},'"Pilot"'),", ",(0,i.kt)("inlineCode",{parentName:"p"},'"Gunner"'),", or ",(0,i.kt)("inlineCode",{parentName:"p"},'"Passenger"'),")."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.seatIndex(): string")),(0,i.kt)("p",null,"Gets the index number of the seat the player is occupying."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.seatCount(): int")),(0,i.kt)("p",null,"Gets the number of seats the vehicle has."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.health(): integer")),(0,i.kt)("p",null,"Gets the current health of the vehicle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.healthMax(): integer")),(0,i.kt)("p",null,"Gets the maximum health of the vehicle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.energyPct(): float")),(0,i.kt)("p",null,"Gets the vehicle's current energy as a percentage of the total."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.ammo(): integer")),(0,i.kt)("p",null,"Gets the amount of ammo the vehicle's weapon currently has."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.ammoMax(): integer")),(0,i.kt)("p",null,"Gets the maximum ammo for the vehicle."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"vehicle.speed(): integer")),(0,i.kt)("p",null,"Gets the vehicle's current speed."),(0,i.kt)("h2",{id:"flag"},"Flag"),(0,i.kt)("p",null,"Provides information about the flag in CTF."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flag.isHome(teamNum: Team): boolean")),(0,i.kt)("p",null,"Returns true if the given team's flag is currently on its stand."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flag.returnTime(teamNum: Team): integer")),(0,i.kt)("p",null,"Gets the number of seconds before the flag returns (",(0,i.kt)("inlineCode",{parentName:"p"},"0")," if flag is not loose in field)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"flag.holderName(teamNum: Team): string")),(0,i.kt)("p",null,"Gets the name of the player holding the given team's flag (",(0,i.kt)("inlineCode",{parentName:"p"},'""')," if the flag is not being held)."),(0,i.kt)("h2",{id:"arena"},"Arena"),(0,i.kt)("p",null,"Provides Arena-specific game information."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"arena.round(): integer")),(0,i.kt)("p",null,"Gets the current round number."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"arena.roundScore(teamNum: Team): integer")),(0,i.kt)("p",null,"Gets the number of lives the given team has left for this round."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"arena.playerStatus(teamNum: Team, playerNum: integer): integer")),(0,i.kt)("p",null,"Gets a bitmask indicating status of the given player index on the given team."),(0,i.kt)("h5",{id:"bit-mask-specification"},"Bit mask specification"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Bit Position"),(0,i.kt)("th",{parentName:"tr",align:null},"Binary mask (least significant bits)"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1"),"s place"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0001")),(0,i.kt)("td",{parentName:"tr",align:null},"Bit on if player exists")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"2"),"s place"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0010")),(0,i.kt)("td",{parentName:"tr",align:null},"Bit on if player is alive")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"4"),"s place"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0100")),(0,i.kt)("td",{parentName:"tr",align:null},"Bit on if player has spawns left")))),(0,i.kt)("h5",{id:"possible-values"},"Possible values"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Value"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"0 = 0b0000")),(0,i.kt)("td",{parentName:"tr",align:null},"Player does not exist")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1 = 0b0001")),(0,i.kt)("td",{parentName:"tr",align:null},"Player exists, is not alive, has no spawns")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"3 = 0b0011")),(0,i.kt)("td",{parentName:"tr",align:null},"Player exists, is alive, has no spawns")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"5 = 0b0101")),(0,i.kt)("td",{parentName:"tr",align:null},"Player exists, is not alive, has spawns")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"7 = 0b0111")),(0,i.kt)("td",{parentName:"tr",align:null},"Player exists, is alive, has spawns")))),(0,i.kt)("h2",{id:"rabbit"},"Rabbit"),(0,i.kt)("p",null,"Provides Rabbit-specific game information. Note that in the Rabbit game mode, ",(0,i.kt)("inlineCode",{parentName:"p"},"player.score()")," will return the current player's Rabbit points."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rabbit.rabbitName(): string")),(0,i.kt)("p",null,"Gets the name of the current rabbit."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rabbit.leaderBoardScore(position: integer): integer")),(0,i.kt)("p",null,"Gets the score of one of the players on the rabbit scoreboard. ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," must be ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," (first place), ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," (second place), or ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," (third place)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"rabbit.leaderBoardName(position: integer): string")),(0,i.kt)("p",null,"Gets the name of the player at ",(0,i.kt)("inlineCode",{parentName:"p"},"position")," on the rabbit scoreboard."),(0,i.kt)("h2",{id:"cah"},"CaH"),(0,i.kt)("p",null,"Provides Capture and Hold-specific game information."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cah.pointsNum(): integer")),(0,i.kt)("p",null,"Gets the number of control points on the current map."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cah.pointsHeld(teamNum: Team): integer")),(0,i.kt)("p",null,"Gets the number of control points held by the given team."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cah.pointHolder(pointIndex: integer): Team")),(0,i.kt)("p",null,"Gets the team which holds the point with the given index."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"cah.pointLabel(pointIndex: integer): character")),(0,i.kt)("p",null,"Gets the single-character label (",(0,i.kt)("inlineCode",{parentName:"p"},"'A'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'B'")," etc.) for the point with the given index."))}d.isMDXComponent=!0}}]);