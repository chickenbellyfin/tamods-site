"use strict";(self.webpackChunktamods_site=self.webpackChunktamods_site||[]).push([[7700],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9413:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={id:"doc_dev_api_overview",title:"Overview",sidebar_label:"Overview",sidebar_position:1},p=void 0,l={unversionedId:"developer/api/doc_dev_api_overview",id:"developer/api/doc_dev_api_overview",isDocsHomePage:!1,title:"Overview",description:"The pages in this section present a reference for the Lua API exposed by TAMods core.",source:"@site/docs/developer/api/doc_dev_api_overview.md",sourceDirName:"developer/api",slug:"/developer/api/doc_dev_api_overview",permalink:"/docs/developer/api/doc_dev_api_overview",editUrl:"https://github.com/mcoot/tamods-site/tree/master/docs/developer/api/doc_dev_api_overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"doc_dev_api_overview",title:"Overview",sidebar_label:"Overview",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Tutorial - Handling Events",permalink:"/docs/developer/doc_dev_tute_events"},next:{title:"Console Commands",permalink:"/docs/developer/api/doc_dev_api_consolecommands"}},c=[{value:"Notes on type signature definition",id:"notes-on-type-signature-definition",children:[],level:2}],d={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The pages in this section present a reference for the Lua API exposed by TAMods core."),(0,i.kt)("h2",{id:"notes-on-type-signature-definition"},"Notes on type signature definition"),(0,i.kt)("p",null,"Lua is dynamically typed, so there are no static checks for the type correctness of scripts. Generally, scripts with type errors will produce a console error message at runtime. Additionally, Lua does not check that functions receive the right number of arguments: extra arguments are ignored, and missing arguments are replaced with ",(0,i.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,i.kt)("p",null,"Function signatures in the reference denote the intended types of the function via the following (non-Lua) syntax:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"someFunction(arg1: Arg1Type, arg2: Arg2Type): ReturnType")),(0,i.kt)("p",null,"Note that where functions do not return a value, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ReturnType")," is omitted."),(0,i.kt)("p",null,"For clarity, the types ",(0,i.kt)("inlineCode",{parentName:"p"},"integer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"float")," are used to distinguish numerical arguments where appropriate, even though Lua's type system only supports a single ",(0,i.kt)("inlineCode",{parentName:"p"},"number")," type."),(0,i.kt)("p",null,"Lua does not support 'arrays' or 'tuples' in the traditional sense: most data structures in Lua are ",(0,i.kt)("em",{parentName:"p"},"Tables"),". In the reference, ",(0,i.kt)("inlineCode",{parentName:"p"},"List<T>"),' is used to refer to a "list" of items of type ',(0,i.kt)("inlineCode",{parentName:"p"},"T"),', where the "list" is actually a Table with sequentially numbered one-indexed keys (as Lua indexing normally starts at one).'),(0,i.kt)("p",null,"Tuples in Lua are essentially the same; in the reference they will be denoted like ",(0,i.kt)("inlineCode",{parentName:"p"},"(T1, T2)")," where ",(0,i.kt)("inlineCode",{parentName:"p"},"T1")," is the type of the first element, ",(0,i.kt)("inlineCode",{parentName:"p"},"T2")," the second and so on. This corresponds again to a Lua Table with sequentially numbered one-indexed keys."))}u.isMDXComponent=!0}}]);