(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{113:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),o=n(7),i=(n(0),n(126)),a={id:"doc_dev_api_overview",title:"Overview",sidebar_label:"Overview"},s={unversionedId:"doc_dev_api_overview",id:"doc_dev_api_overview",isDocsHomePage:!1,title:"Overview",description:"The pages in this section present a reference for the Lua API exposed by TAMods core.",source:"@site/docs/doc_dev_api_overview.md",slug:"/doc_dev_api_overview",permalink:"/tamods-site/docs/doc_dev_api_overview",editUrl:"https://github.com/mcoot/taserver/edit/master/website/docs/doc_dev_api_overview.md",version:"current",sidebar_label:"Overview",sidebar:"developer",previous:{title:"Tutorial - Writing a HUDModule",permalink:"/tamods-site/docs/doc_dev_tute_hudmodule"},next:{title:"Console Commands",permalink:"/tamods-site/docs/doc_dev_api_consolecommands"}},c=[{value:"Notes on type signature definition",id:"notes-on-type-signature-definition",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The pages in this section present a reference for the Lua API exposed by TAMods core."),Object(i.b)("h2",{id:"notes-on-type-signature-definition"},"Notes on type signature definition"),Object(i.b)("p",null,"Lua is dynamically typed, so there are no static checks for the type correctness of scripts. Generally, scripts with type errors will produce a console error message at runtime. Additionally, Lua does not check that functions receive the right number of arguments: extra arguments are ignored, and missing arguments are replaced with ",Object(i.b)("inlineCode",{parentName:"p"},"nil"),"."),Object(i.b)("p",null,"Function signatures in the reference denote the intended types of the function via the following (non-Lua) syntax:"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"someFunction(arg1: Arg1Type, arg2: Arg2Type): ReturnType")),Object(i.b)("p",null,"Note that where functions do not return a value, the ",Object(i.b)("inlineCode",{parentName:"p"},"ReturnType")," is omitted."),Object(i.b)("p",null,"For clarity, the types ",Object(i.b)("inlineCode",{parentName:"p"},"integer")," and ",Object(i.b)("inlineCode",{parentName:"p"},"float")," are used to distinguish numerical arguments where appropriate, even though Lua's type system only supports a single ",Object(i.b)("inlineCode",{parentName:"p"},"number")," type."),Object(i.b)("p",null,"Lua does not support 'arrays' or 'tuples' in the traditional sense: most data structures in Lua are ",Object(i.b)("em",{parentName:"p"},"Tables"),". In the reference, ",Object(i.b)("inlineCode",{parentName:"p"},"List<T>"),' is used to refer to a "list" of items of type ',Object(i.b)("inlineCode",{parentName:"p"},"T"),', where the "list" is actually a Table with sequentially numbered one-indexed keys (as Lua indexing normally starts at one).'),Object(i.b)("p",null,"Tuples in Lua are essentially the same; in the reference they will be denoted like ",Object(i.b)("inlineCode",{parentName:"p"},"(T1, T2)")," where ",Object(i.b)("inlineCode",{parentName:"p"},"T1")," is the type of the first element, ",Object(i.b)("inlineCode",{parentName:"p"},"T2")," the second and so on. This corresponds again to a Lua Table with sequentially numbered one-indexed keys."))}l.isMDXComponent=!0},126:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),l=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),b=r,m=u["".concat(a,".").concat(b)]||u[b]||d[b]||i;return n?o.a.createElement(m,s(s({ref:t},p),{},{components:n})):o.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);