(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{126:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function b(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?b(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):b(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),o=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=o(a),u=n,O=m["".concat(b,".").concat(u)]||m[u]||d[u]||l;return a?r.a.createElement(O,i(i({ref:t},p),{},{components:a})):r.a.createElement(O,i({ref:t},p))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,b=new Array(l);b[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:n,b[1]=i;for(var p=2;p<l;p++)b[p]=a[p];return r.a.createElement.apply(null,b)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},70:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return i})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return o}));var n=a(3),r=a(7),l=(a(0),a(126)),b={id:"doc_srv_api_serverconfig",title:"Server Settings",sidebar_label:"Server Settings"},i={unversionedId:"doc_srv_api_serverconfig",id:"doc_srv_api_serverconfig",isDocsHomePage:!1,title:"Server Settings",description:"Server Settings",source:"@site/docs/doc_srv_api_serverconfig.md",slug:"/doc_srv_api_serverconfig",permalink:"/docs/doc_srv_api_serverconfig",editUrl:"https://github.com/mcoot/taserver/edit/master/website/docs/doc_srv_api_serverconfig.md",version:"current",sidebar_label:"Server Settings",sidebar:"server",previous:{title:"API Overview",permalink:"/docs/doc_srv_api_overview"},next:{title:"Server Administration",permalink:"/docs/doc_srv_api_admin"}},c=[{value:"Server Settings",id:"server-settings",children:[{value:"Enums",id:"enums",children:[]},{value:"Options",id:"options",children:[]}]},{value:"Map Rotation",id:"map-rotation",children:[{value:"Rotation Mode",id:"rotation-mode",children:[]},{value:"Setting the Rotation",id:"setting-the-rotation",children:[]},{value:"Maps",id:"maps",children:[]}]}],p={toc:c};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"server-settings"},"Server Settings"),Object(l.b)("h3",{id:"enums"},"Enums"),Object(l.b)("h4",{id:"teamassigntypes"},"TeamAssignTypes"),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"TeamAssignTypes")," enum represents the possible approaches to team assignment. It has the values:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Balanced")," - players are restricted to join teams so that each team has a balanced number of players"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Unbalanced")," - players are free to join either team irrespective of numbers"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"AutoAssign")," - players are automatically assigned to teams")),Object(l.b)("h3",{id:"options"},"Options"),Object(l.b)("h4",{id:"timing"},"Timing"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.TimeLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"25"),Object(l.b)("td",{parentName:"tr",align:null},"Game time limit in minutes")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.OvertimeLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null},"Length of overtime in minutes")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.WarmupTime"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"20"),Object(l.b)("td",{parentName:"tr",align:null},"Length of warmup time in seconds")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.RespawnTime"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"5"),Object(l.b)("td",{parentName:"tr",align:null},"Respawn time in seconds")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.SniperRespawnDelay"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Additional respawn time incurred when the player has a sniper rifle")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.AmmoPickupLifespan"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"15"),Object(l.b)("td",{parentName:"tr",align:null},"Time in seconds that ammo pickups dropped by dead players last")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.CTFFlagTimeout"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"40"),Object(l.b)("td",{parentName:"tr",align:null},"Time in seconds before a dropped flag will return to base")))),Object(l.b)("h4",{id:"team-options"},"Team Options"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.MaxPlayers"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"32"),Object(l.b)("td",{parentName:"tr",align:null},"Maximum server player count")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.TeamAssignType"),Object(l.b)("td",{parentName:"tr",align:null},"TeamAssignType"),Object(l.b)("td",{parentName:"tr",align:null},"TeamAssignTypes.Balanced"),Object(l.b)("td",{parentName:"tr",align:null},"How players should be assigned to teams")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.NakedSpawn"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether players should spawn naked (as lights without their loadout)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.AutoBalanceTeams"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether to auto-balance teams in-game")))),Object(l.b)("h4",{id:"scoring-options"},"Scoring Options"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.CTFCapLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"5"),Object(l.b)("td",{parentName:"tr",align:null},"Caps to win in CTF")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.TDMKillLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"100"),Object(l.b)("td",{parentName:"tr",align:null},"Kills to win in TDM")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.ArenaRounds"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"3"),Object(l.b)("td",{parentName:"tr",align:null},"Number of rounds in Arena")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.ArenaLives"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"25"),Object(l.b)("td",{parentName:"tr",align:null},"Number of lives per round in Arena")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.RabbitScoreLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"30"),Object(l.b)("td",{parentName:"tr",align:null},"Score to win in Rabbit")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.CaHScoreLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"50"),Object(l.b)("td",{parentName:"tr",align:null},"Score to win in Capture and Hold")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.CTFBlitzAllFlagsMove"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether both teams' flags move after a cap in Blitz")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.TeamCredits"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether player credits form a shared team pool")))),Object(l.b)("h4",{id:"friendly-fire"},"Friendly Fire"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FriendlyFire"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether friendly fire is enabled")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FriendlyFireMultiplier"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"1.0"),Object(l.b)("td",{parentName:"tr",align:null},"Multiplier for friendly fire damage")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FriendlyFireDamageKickLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Amount of friendly damage done before a player is kicked (0 for no limit)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FriendlyFireKillKickLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Number of friendly players killed before kick (0 for no limit)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BaseDestructionKickLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Amount of damage to the friendly base done before kick (0 for no limit)")))),Object(l.b)("h4",{id:"vehicles"},"Vehicles"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.VehicleHealthMultiplier"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"1.0"),Object(l.b)("td",{parentName:"tr",align:null},"Multiplier affecting all vehicles' health")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.GravCycleLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"4"),Object(l.b)("td",{parentName:"tr",align:null},"Number of Grav Cycles allowed per team")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.ShrikeLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"2"),Object(l.b)("td",{parentName:"tr",align:null},"Number of Shrikes allowed per team")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BeowulfLimit"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"2"),Object(l.b)("td",{parentName:"tr",align:null},"Number of Beowulfs allowed per team")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.VehiclesEarnedWithCredits"),Object(l.b)("td",{parentName:"tr",align:null},"bool"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"If true, vehicles are earned via credits (GOTY); if false, they spawn over time (OOTB)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.GravCycleCost"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"500"),Object(l.b)("td",{parentName:"tr",align:null},"Credit cost for a Grav Cycle (GOTY)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.ShrikeCost"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"4000"),Object(l.b)("td",{parentName:"tr",align:null},"Credit cost for a Shrike (GOTY)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BeowulfCost"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"2500"),Object(l.b)("td",{parentName:"tr",align:null},"Credit cost for a Beowulf (GOTY)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.GravCycleSpawnTime"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"30"),Object(l.b)("td",{parentName:"tr",align:null},"Generation time for Grav Cycles in seconds (OOTB)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.ShrikeSpawnTime"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"120"),Object(l.b)("td",{parentName:"tr",align:null},"Generation time for Shrikes in seconds (OOTB)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BeowulfSpawnTime"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"120"),Object(l.b)("td",{parentName:"tr",align:null},"Generation time for Beowulfs in seconds (OOTB)")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.GravCycleEjectionSeat"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether Grav Cycles eject drivers on death")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BeowulfEjectionSeat"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether Beowulfs eject pilots on death")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.ShrikeEjectionSeat"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether Shrikes eject pilots on death")))),Object(l.b)("h4",{id:"base"},"Base"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BaseAssets"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether turrets and sensors are enabled")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BaseUpgrades"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether base upgrades are enabled")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.PoweredDeployables"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether deployables (e.g. turrets) require generator power")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.GeneratorRegen"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the generator regenerates automatically over time")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.GeneratorDestroyable"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether the generator can be destroyed")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.BaseAssetFriendlyFire"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether friendly fire applies to base assets")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.DeployableFriendlyFire"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"Whether friendly fire applies to deployables")))),Object(l.b)("h4",{id:"call-in-options"},"Call-In Options"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.EnableInventoryCallIn"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether inventory station call-ins are enabled")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInCost"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Credits cost for an inventory call-in")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInBuildUpTime"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"2"),Object(l.b)("td",{parentName:"tr",align:null},"Seconds it takes to call in an inventory station")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInCooldownTime"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"10"),Object(l.b)("td",{parentName:"tr",align:null},"Personal cooldown after calling in an inventory station before you can do so again")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInBlocksPlayers"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"If false, players can pass through inventory stations without being blocked")))),Object(l.b)("h5",{id:"call-in-placement-tweaks"},"Call-In Placement Tweaks"),Object(l.b)("p",null,"These variables tweak the collision checking used to determine if an inv station can be called at a given location."),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInMapCollisionCheckExtent"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"100"),Object(l.b)("td",{parentName:"tr",align:null},"The extent (distance) around the point used to check for terrain collisions")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInStationCollisionCheckExtent"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"700"),Object(l.b)("td",{parentName:"tr",align:null},"The minimum distance in UU away another inv station may be when placing one")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInTerrainMaxAngle"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"70"),Object(l.b)("td",{parentName:"tr",align:null},"Maximium terrain incline in degrees at which an inv station may be placed")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryCallInMeshMaxAngle"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"40"),Object(l.b)("td",{parentName:"tr",align:null},"Maximum mesh incline (e.g. a stand/base structure) in degrees at which an inv station may be placed")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null}),Object(l.b)("td",{parentName:"tr",align:null})))),Object(l.b)("h4",{id:"gameplay-customisation"},"Gameplay Customisation"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.EnergyMultiplier"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"1.0"),Object(l.b)("td",{parentName:"tr",align:null},"Multiplier affecting the energy pools of all players")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.AoESizeMultiplier"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"1.0"),Object(l.b)("td",{parentName:"tr",align:null},"Multiplier affecting the size of all Area-of-Effect explosions")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.AoEDamageMultiplier"),Object(l.b)("td",{parentName:"tr",align:null},"float"),Object(l.b)("td",{parentName:"tr",align:null},"1.0"),Object(l.b)("td",{parentName:"tr",align:null},"Multiplier affecting the damage done by Area-of-Effect explosions")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.SkiingEnabled"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"true"),Object(l.b)("td",{parentName:"tr",align:null},"Whether skiing is enabled")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.UseGOTYShieldPack"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"If true, shield pack effects are reverted to GOTY patch behaviour*")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.UseGOTYBXTCharging"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"If true, the BXT rifles work as in GOTY with respect to charging and unscoped damage")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.InventoryStationsRestoreEnergy"),Object(l.b)("td",{parentName:"tr",align:null},"boolean"),Object(l.b)("td",{parentName:"tr",align:null},"false"),Object(l.b)("td",{parentName:"tr",align:null},"If true, players will have energy restored when entering an inventory station")))),Object(l.b)("p",null,"*"," With UseGOTYShieldPack on, taking damage which is absorbed by shields will not block regen, and the heavy shield pack will not reduce impulse received when active."),Object(l.b)("h4",{id:"flag-drag"},"Flag Drag"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Variable"),Object(l.b)("th",{parentName:"tr",align:null},"Type"),Object(l.b)("th",{parentName:"tr",align:null},"Default"),Object(l.b)("th",{parentName:"tr",align:null},"Description"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FlagDragLight"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Speed at which flag-drag occurs for lights")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FlagDragMedium"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Speed at which flag-drag occurs for mediums")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FlagDragHeavy"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Speed at which flag-drag occurs for heavies")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},"ServerSettings.FlagDragDeceleration"),Object(l.b)("td",{parentName:"tr",align:null},"int"),Object(l.b)("td",{parentName:"tr",align:null},"0"),Object(l.b)("td",{parentName:"tr",align:null},"Deceleration rate for flag-drag")))),Object(l.b)("h2",{id:"map-rotation"},"Map Rotation"),Object(l.b)("h3",{id:"rotation-mode"},"Rotation Mode"),Object(l.b)("p",null,"The map rotation is either ",Object(l.b)("em",{parentName:"p"},"sequential")," (default), where each map is played in the order they are added to the rotation, or ",Object(l.b)("em",{parentName:"p"},"random"),", where after each map a new map is selected at random from the rotation (this can be the same map)."),Object(l.b)("p",null,"This can be controlled via the following variable:"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ServerSettings.MapRotation.Mode")),Object(l.b)("p",null,"This should have one of the following values:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ServerSettings.MapRotation.Modes.Sequential")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"ServerSettings.MapRotation.Modes.Random"))),Object(l.b)("h3",{id:"setting-the-rotation"},"Setting the Rotation"),Object(l.b)("p",null,"The rotation itself may be controlled via the below functions:"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ServerSettings.MapRotation.add(map: Map)")),Object(l.b)("p",null,"Adds a map to the rotation. The map should be a value from the ",Object(l.b)("a",{parentName:"p",href:"#maps"},"Maps enum")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"ServerSettings.MapRotation.addCustom(mapName: string)")),Object(l.b)("p",null,"Adds a map to the rotation by filename (as located in the game's CookedPC/maps directory). Can be used to run a custom map."),Object(l.b)("p",null,"An example of adding maps to the rotation is given below:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-lua"},'ServerSettings.MapRotation.add(Maps.CTF.ArxNovena)\nServerSettings.MapRotation.add(Maps.TDM.DrydockNight)\nServerSettings.MapRotation.add(Maps.Arena.WalledIn)\nServerSettings.MapRotation.addCustom("TrCTF-Katabatic")\n')),Object(l.b)("h3",{id:"maps"},"Maps"),Object(l.b)("p",null,"The Maps enum gives values (i.e. map codes) for all maps existing in the game, under the following namespaces:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Maps.CTF")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Maps.TDM")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Maps.Arena")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Maps.Rabbit")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Maps.CaH")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Maps.Blitz"))),Object(l.b)("p",null,"The full listing is omitted here, but the full names of all maps work, as do common contractions and initialisms (e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"Maps.CTF.Arx")," or ",Object(l.b)("inlineCode",{parentName:"p"},"Maps.CTF.DX"),")."))}o.isMDXComponent=!0}}]);