"use strict";(self.webpackChunktamods_site=self.webpackChunktamods_site||[]).push([[1721],{3905:function(t,e,n){n.d(e,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},d=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},c=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),c=u(n),m=r,k=c["".concat(p,".").concat(m)]||c[m]||s[m]||l;return n?a.createElement(k,o(o({ref:e},d),{},{components:n})):a.createElement(k,o({ref:e},d))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,o=new Array(l);o[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6546:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return c}});var a=n(7462),r=n(3366),l=(n(7294),n(3905)),o=["components"],i={id:"doc_dev_api_routes",title:"Capping and Route Recording",sidebar_label:"Capping and Route Recording",sidebar_position:7},p=void 0,u={unversionedId:"developer/api/doc_dev_api_routes",id:"developer/api/doc_dev_api_routes",isDocsHomePage:!1,title:"Capping and Route Recording",description:"Stopwatch",source:"@site/docs/developer/api/doc_dev_api_routes.md",sourceDirName:"developer/api",slug:"/developer/api/doc_dev_api_routes",permalink:"/docs/developer/api/doc_dev_api_routes",editUrl:"https://github.com/mcoot/tamods-site/tree/master/docs/developer/api/doc_dev_api_routes.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"doc_dev_api_routes",title:"Capping and Route Recording",sidebar_label:"Capping and Route Recording",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Model and Projectile Modification",permalink:"/docs/developer/api/doc_dev_api_model_proj"},next:{title:"Drawing",permalink:"/docs/developer/api/doc_dev_api_drawing"}},d=[{value:"Stopwatch",id:"stopwatch",children:[{value:"Configuration Variables",id:"configuration-variables",children:[],level:4},{value:"Functions",id:"functions",children:[],level:4}],level:2},{value:"State Saving",id:"state-saving",children:[{value:"Configuration Variables",id:"configuration-variables-1",children:[],level:4},{value:"Functions",id:"functions-1",children:[],level:4}],level:2},{value:"Route Recording",id:"route-recording",children:[{value:"Configuration Variables",id:"configuration-variables-2",children:[],level:4},{value:"Functions",id:"functions-2",children:[{value:"Recording",id:"recording",children:[],level:5},{value:"Replay",id:"replay",children:[],level:5},{value:"Loading / Saving",id:"loading--saving",children:[],level:5}],level:4}],level:2}],s={toc:d};function c(t){var e=t.components,n=(0,r.Z)(t,o);return(0,l.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"stopwatch"},"Stopwatch"),(0,l.kt)("p",null,"TAMods offers a built-in stopwatch feature, useful for timing capping routes."),(0,l.kt)("h4",{id:"configuration-variables"},"Configuration Variables"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"stopwatchStopOnCap")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the stopwatch should stop when the flag is capped")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"stopwatchStopOnDeath")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the stopwatch should stop when the player dies")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"stopwatchNotifications")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to show dropdown notifications for the stopwatch on flag pickup etc.")))),(0,l.kt)("h4",{id:"functions"},"Functions"),(0,l.kt)("p",null,"These functions in the ",(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch")," namespace correspond to console commands, accessible via the Lua API to allow for keybinding."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch.start()")),(0,l.kt)("p",null,"Start (and reset) the stopwatch."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch.stop()")),(0,l.kt)("p",null,"End the stopwatch."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch.toggle()")),(0,l.kt)("p",null,"Start the stopwatch if it is stopped; stop it otherwise."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch.isRunning(): boolean")),(0,l.kt)("p",null,"Returns true if the stopwatch is running."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch.time(): float")),(0,l.kt)("p",null,"Get the time on the stopwatch in seconds."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"stopwatch.timeStr(): string")),(0,l.kt)("p",null,"Get the time on the stopwatch as a formatted string."),(0,l.kt)("h2",{id:"state-saving"},"State Saving"),(0,l.kt)("p",null,"The state functions allow for the saving of specific locations on the map, and recalling / teleporting to them (in roam map only)."),(0,l.kt)("h4",{id:"configuration-variables-1"},"Configuration Variables"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"showSavedLocations")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to display markers for saved state locations in roam map")))),(0,l.kt)("h4",{id:"functions-1"},"Functions"),(0,l.kt)("p",null,"These functions in the ",(0,l.kt)("inlineCode",{parentName:"p"},"state")," namespace correspond to console commands, accessible via the Lua API to allow for keybinding."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.save()")),(0,l.kt)("p",null,"Save the current player position into the default (first) save slot."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.saveTo(slot: integer)")),(0,l.kt)("p",null,"Save the current player position into the given slot (",(0,l.kt)("inlineCode",{parentName:"p"},"1 <= slot <= 9"),")."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.tp()")),(0,l.kt)("p",null,"Teleport to the default (first) saved state, restoring position only, and refilling health and ammo."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.tpTo(slot: integer)")),(0,l.kt)("p",null,"Teleport to the given saved state, restoring position only, and refilling health and ammo."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.recall()")),(0,l.kt)("p",null,"Recall to the default (first) saved state, restoring not just position but complete state at that time (e.g. health, energy, velocity, flag status)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.recallTo(slot: integer)")),(0,l.kt)("p",null,"Recall to the given saved state, restoring not just position but complete state at that time (e.g. health, energy, velocity, flag status)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.reset()")),(0,l.kt)("p",null,"Remove all saved states."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"state.setToSpawns()")),(0,l.kt)("p",null,"Set saved states to the team's spawn locations."),(0,l.kt)("h2",{id:"route-recording"},"Route Recording"),(0,l.kt)("h4",{id:"configuration-variables-2"},"Configuration Variables"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Variable"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Default"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"routeDrawInterval")),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"500"),(0,l.kt)("td",{parentName:"tr",align:null},"How frequently to draw markers on recorded routes, in milliseconds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"routeDrawETAInterval")),(0,l.kt)("td",{parentName:"tr",align:null},"integer"),(0,l.kt)("td",{parentName:"tr",align:null},"5"),(0,l.kt)("td",{parentName:"tr",align:null},"How frequently to draw route times, in seconds")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"routeDrawTransparency")),(0,l.kt)("td",{parentName:"tr",align:null},"float"),(0,l.kt)("td",{parentName:"tr",align:null},"0.8"),(0,l.kt)("td",{parentName:"tr",align:null},"The transparency of route markers")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"routeReplayRotation")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"true"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to rotation the player/bot view during route replay")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"routeCinematicMode")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"false"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether to adjust route replay to be smoother")))),(0,l.kt)("h4",{id:"functions-2"},"Functions"),(0,l.kt)("p",null,"These functions in the ",(0,l.kt)("inlineCode",{parentName:"p"},"route")," namespace correspond to console commands, accessible via the Lua API to allow for keybinding."),(0,l.kt)("h5",{id:"recording"},"Recording"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.record()")),(0,l.kt)("p",null,"Toggle route recording (aliased to ",(0,l.kt)("inlineCode",{parentName:"p"},"route.rec()"),")."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.recStart()")),(0,l.kt)("p",null,"Start route recording."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.recStop()")),(0,l.kt)("p",null,"End route recording."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.reset()")),(0,l.kt)("p",null,"Reset the current route. Stops any on-going recording."),(0,l.kt)("h5",{id:"replay"},"Replay"),(0,l.kt)("p",null,"Route replay is only available in roam map."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.replay()")),(0,l.kt)("p",null,"Toggle in-game replay of the current route."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.replayStart(startTime: float)")),(0,l.kt)("p",null,"Start in-game replay of the current route at the given time in the route."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.replayStop()")),(0,l.kt)("p",null,"Stop replay of the current route."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.enableBot(on: boolean)")),(0,l.kt)("p",null,"Enable or disable bot replay. If bot replay is off, replaying a route will replay from the player's perspective."),(0,l.kt)("h5",{id:"loading--saving"},"Loading / Saving"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.getAll()")),(0,l.kt)("p",null,"Load all route files for the current map into the game."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.getTeam()")),(0,l.kt)("p",null,"Load only route files for the player's current team on the current map."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.getEnemy()")),(0,l.kt)("p",null,"Load only route file for the opposing team on the current map."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.getTable(): List<string>")),(0,l.kt)("p",null,"Get a Lua table containing all currently loaded route names (in the form of a 0-indexed list)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.save(description: string)")),(0,l.kt)("p",null,"Save the current route, with the given route name / description. Details about the map, team, player class, player name, route length etc. will be automatically saved."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.load(routeNumber: integer)")),(0,l.kt)("p",null,"Set the current route to the given numbered route in the listings for the current map."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.find(regex: string)")),(0,l.kt)("p",null,"Find loaded routes matching the given regex, and print them to the console. Aliased to ",(0,l.kt)("inlineCode",{parentName:"p"},"route.search(regex: string)"),"."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"route.list()")),(0,l.kt)("p",null,"List all loaded routes to the console."))}c.isMDXComponent=!0}}]);