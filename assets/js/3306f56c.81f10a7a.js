"use strict";(self.webpackChunktamods_site=self.webpackChunktamods_site||[]).push([[7818],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return h}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=p(t),h=i,c=m["".concat(d,".").concat(h)]||m[h]||u[h]||l;return t?a.createElement(c,r(r({ref:n},s),{},{components:t})):a.createElement(c,r({ref:n},s))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=m;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},833:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return o},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var a=t(7462),i=t(3366),l=(t(7294),t(3905)),r=["components"],o={id:"doc_dev_api_events",title:"Event Handling and I/O",sidebar_label:"Event Handling and I/O",sidebar_position:3},d=void 0,p={unversionedId:"developer/api/doc_dev_api_events",id:"developer/api/doc_dev_api_events",isDocsHomePage:!1,title:"Event Handling and I/O",description:"Console Input & Output",source:"@site/docs/developer/api/doc_dev_api_events.md",sourceDirName:"developer/api",slug:"/developer/api/doc_dev_api_events",permalink:"/docs/developer/api/doc_dev_api_events",editUrl:"https://github.com/mcoot/tamods-site/tree/master/docs/developer/api/doc_dev_api_events.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"doc_dev_api_events",title:"Event Handling and I/O",sidebar_label:"Event Handling and I/O",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Console Commands",permalink:"/docs/developer/api/doc_dev_api_consolecommands"},next:{title:"Game Information",permalink:"/docs/developer/api/doc_dev_api_gameinfo"}},s=[{value:"Console Input &amp; Output",id:"console-input--output",children:[],level:2},{value:"Event Handling in TAMods",id:"event-handling-in-tamods",children:[],level:2},{value:"Writing Event Handlers",id:"writing-event-handlers",children:[],level:2},{value:"Available Event Handlers",id:"available-event-handlers",children:[{value:"onChatMessage",id:"onchatmessage",children:[{value:"ChatChannel enum",id:"chatchannel-enum",children:[],level:5}],level:3},{value:"onGameMessage",id:"ongamemessage",children:[],level:3},{value:"onKillMessage",id:"onkillmessage",children:[],level:3},{value:"onAddToCombatLog",id:"onaddtocombatlog",children:[{value:"KillType enum",id:"killtype-enum",children:[],level:5}],level:3},{value:"onQueueAccolade",id:"onqueueaccolade",children:[],level:3},{value:"onDamageNumberCreate",id:"ondamagenumbercreate",children:[],level:3},{value:"onDamageNumberUpdate",id:"ondamagenumberupdate",children:[],level:3},{value:"onDrawHealthBar",id:"ondrawhealthbar",children:[],level:3},{value:"onDrawCustomHud",id:"ondrawcustomhud",children:[],level:3},{value:"onInputEvent",id:"oninputevent",children:[],level:3}],level:2},{value:"Key Binding",id:"key-binding",children:[{value:"InputEventType enum",id:"inputeventtype-enum",children:[],level:3},{value:"Binding Functions",id:"binding-functions",children:[],level:3},{value:"Retrieving Keybinds from TribesInput",id:"retrieving-keybinds-from-tribesinput",children:[{value:"KeyBind class",id:"keybind-class",children:[{value:"Properties",id:"properties",children:[],level:5}],level:4}],level:3}],level:2}],u={toc:s};function m(e){var n=e.components,t=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"console-input--output"},"Console Input & Output"),(0,l.kt)("p",null,"TAMods allows you to output information via the console. It does not currently support direct console input, but you can open the console with a prompt which will execute Lua (via the ",(0,l.kt)("inlineCode",{parentName:"p"},"/lua")," command)."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"console(message: string)")),(0,l.kt)("p",null,"Prints the message to the console. Also aliased to ",(0,l.kt)("inlineCode",{parentName:"p"},"print(message: string)")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"consoleRGB(message: string, color: Color)")),(0,l.kt)("p",null,"Prints the message to the console in the given colour."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"notify(title: string, message: string)")),(0,l.kt)("p",null,"Displays a dropdown notification with the given title and message."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"openConsole(prompt: string)")),(0,l.kt)("p",null,"Opens the console, with the prompt pre-filled into the command text entry."),(0,l.kt)("p",null,"This can be used to prompt users for input by pre-filling the ",(0,l.kt)("inlineCode",{parentName:"p"},"/lua")," command. The example below would prompt the user to provide a value for ",(0,l.kt)("inlineCode",{parentName:"p"},"MyConfigVariable"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'openConsole("/lua MyConfigVariable = ")\n')),(0,l.kt)("h2",{id:"event-handling-in-tamods"},"Event Handling in TAMods"),(0,l.kt)("p",null,"The code in your ",(0,l.kt)("inlineCode",{parentName:"p"},"config.lua"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"custom.lua")," and any custom scripts is run when TAMods loads the config (on injection, and when the ",(0,l.kt)("inlineCode",{parentName:"p"},"/reloadconfig")," command is used). Generally you will want your mod to be able to run code at other times during the game. To do this, you need to set up ",(0,l.kt)("em",{parentName:"p"},"event handlers")," which are triggered by certain events in the game."),(0,l.kt)("p",null,"TAMods allows you to write handlers for a number of ingame events. You can also attach handlers to input from the player via keybinds (discussed below)."),(0,l.kt)("h2",{id:"writing-event-handlers"},"Writing Event Handlers"),(0,l.kt)("p",null,"Event handlers are defined by writing a Lua function with the name of the event. The handler function should have a signature appropriate for that event (see ",(0,l.kt)("a",{parentName:"p",href:"#available-event-handlers"},"below")," for available event handlers with signatures)."),(0,l.kt)("p",null,"Often you will want to attach ",(0,l.kt)("em",{parentName:"p"},"multiple")," event handlers to one event (or use presets/scripts which attach handlers to the same event). Specifying the handler function multiple times will overwrite the handler, and only the last definition will be executed."),(0,l.kt)("p",null,"Hence, you should always write event handlers following the pattern in the example below to execute any pre-existing event handler before running yours."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'-- Variable to hold a reference to any existing handler for SomeEvent\nlocal onSomeEventOld\n-- If there\'s already an onSomeEvent handler, save it into onSomeEventOld\nif type(onSomeEvent) == "function" then\n    onSomeEventOld = onSomeEvent\nend\n\n-- Define our new handler\nfunction onSomeEvent(someArg1, someArg2)\n    -- If we saved a previous handler, execute that handler\n    if onSomeEventOld then onSomeEventOld(someArg1, someArg2) end\n\n    -- Do our own handling\n    doEventHandlingStuffHere()\nend\n')),(0,l.kt)("p",null,"If event handlers are defined using this structure (substituting ",(0,l.kt)("inlineCode",{parentName:"p"},"SomeEvent")," and the handling logic as need be), multiple handlers for the same event will execute correctly."),(0,l.kt)("h2",{id:"available-event-handlers"},"Available Event Handlers"),(0,l.kt)("p",null,"The below function signatures represent the intended signature of the handler function you write for each event."),(0,l.kt)("h3",{id:"onchatmessage"},"onChatMessage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onChatMessage(team: Team, channel: ChatChannel, sender: string, message: string, isVGS: boolean)")),(0,l.kt)("p",null,"Event which fires when a chat message is received (including from this player). See the ",(0,l.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_gameinfo#team-enum"},"Team enum")," for possible values of the ",(0,l.kt)("inlineCode",{parentName:"p"},"team")," parameter."),(0,l.kt)("h5",{id:"chatchannel-enum"},"ChatChannel enum"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.CHAT_CHANNEL_GAME")," = 2 - the game-wide global chat channel"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.CHAT_CHANNEL_TEAM")," = 3 - the team chat channel")),(0,l.kt)("h3",{id:"ongamemessage"},"onGameMessage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onGameMessage(message: string, persistence: float)")),(0,l.kt)("p",null,"Event which fires when an in-game message appears (e.g. on flag return, kill streak, warm-up timer). ",(0,l.kt)("inlineCode",{parentName:"p"},"persistence")," represents the length of time in seconds that the message is intended to be shown for."),(0,l.kt)("h3",{id:"onkillmessage"},"onKillMessage"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onKillMessage(message: string, playerName: string)")),(0,l.kt)("p",null,"Event which fires when the player kills another player. ",(0,l.kt)("inlineCode",{parentName:"p"},"deathMessage")," is the text normally in the killbox (i.e. ",(0,l.kt)("inlineCode",{parentName:"p"},'"You killed"')," or ",(0,l.kt)("inlineCode",{parentName:"p"},'"Kill credit for"'),")."),(0,l.kt)("h3",{id:"onaddtocombatlog"},"onAddToCombatLog"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onAddToCombatLog(killerTeam: integer, killerName: string, killType: KillType, victimName: string, victimTeam: string)")),(0,l.kt)("p",null,"Event which fires when a player dies. ",(0,l.kt)("inlineCode",{parentName:"p"},"killerTeam")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"victimTeam")," will ",(0,l.kt)("em",{parentName:"p"},"normally")," be a ",(0,l.kt)("inlineCode",{parentName:"p"},"Team")," (as per the ",(0,l.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_gameinfo#team-enum"},"Team enum"),") unless the killer or the victim is the current player, in which case it will be ",(0,l.kt)("inlineCode",{parentName:"p"},"<player team> + 2"),": so ",(0,l.kt)("inlineCode",{parentName:"p"},"2")," if the player is on BE and ",(0,l.kt)("inlineCode",{parentName:"p"},"3")," if the player is on DS."),(0,l.kt)("p",null,"If the death is due to suicide, then the ",(0,l.kt)("inlineCode",{parentName:"p"},"killerName")," will be ",(0,l.kt)("inlineCode",{parentName:"p"},"Suicide"),"."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"killType")," does not distinguish with high granularity between weapons - e.g. the index for a kill from an auto is the same as for a kill from a shotgun."),(0,l.kt)("h5",{id:"killtype-enum"},"KillType enum"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_EXPLOSIVE")," = 1"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_STICKY")," = 2"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_SQUISH")," = 3"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_MELEE")," = 4"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_FALLING")," = 5"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_VEHICLE")," = 6"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_BULLET")," = 7"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_SNIPER")," = 8"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_BASE_TURRET")," = 9"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_HEADSHOT")," = 10"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_GENERIC")," = 11"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_SPINFUSOR")," = 12"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_TURRET")," = 13"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.KILL_TYPE_CLAIMED")," = 14")),(0,l.kt)("h3",{id:"onqueueaccolade"},"onQueueAccolade"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},'onQueueAccolade(iconId: integer, accoladeName: string, legacy: "", isBadge: boolean)')),(0,l.kt)("p",null,"Event which fires when the player receives an accolade. The ",(0,l.kt)("inlineCode",{parentName:"p"},"legacy")," parameter is no longer used by TAMods and will always be passed the empty string. The ",(0,l.kt)("inlineCode",{parentName:"p"},"isBadge")," parameter will be true if the accolade being received is a badge."),(0,l.kt)("h3",{id:"ondamagenumbercreate"},"onDamageNumberCreate"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onDamageNumberCreate(existingDamageNumbers: DamageNumberArray, number: integer, location: Vector4, isShield: boolean)")),(0,l.kt)("p",null,"Event called ",(0,l.kt)("em",{parentName:"p"},"instead")," of creating a damage number (i.e. handling this event replaces the native handler)."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"existingDamageNumbers")," parameter is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_datatypes#damagenumberarray-class"},"DamageNumberArray")," of the current existing damage numbers."),(0,l.kt)("h3",{id:"ondamagenumberupdate"},"onDamageNumberUpdate"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onDamageNumberUpdate(damageNumbers: DamageNumberArray, hud: HUD, deltaTime: float)")),(0,l.kt)("p",null,"Event called once per frame ",(0,l.kt)("em",{parentName:"p"},"instead")," of the normal damage number update (i.e. replaces the native handler), to update and draw damage numbers. The ",(0,l.kt)("inlineCode",{parentName:"p"},"hud")," parameter provides the handler with a reference to the player's ",(0,l.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_drawing#hud-data-type"},"HUD"),". ",(0,l.kt)("inlineCode",{parentName:"p"},"deltaTime")," is the time in seconds since the last update."),(0,l.kt)("p",null,"This event is a drawing event, so custom HUD drawing functions may be used."),(0,l.kt)("p",null,"You will generally want to draw damage numbers in this function using the ",(0,l.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_drawing#hud-data-type"},(0,l.kt)("inlineCode",{parentName:"a"},"drawDamageNumber"))," function."),(0,l.kt)("h3",{id:"ondrawhealthbar"},"onDrawHealthBar"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onDrawHealthBar(x: float, y: float, isFriendly: boolean, healthPct: float)")),(0,l.kt)("p",null,"Event called to draw  IFF indicator health bars ",(0,l.kt)("em",{parentName:"p"},"instead")," of the normal function (i.e. replaces the native handler). The ",(0,l.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"y")," parameters define the normal HUD position of the top-left of the healthbar. The ",(0,l.kt)("inlineCode",{parentName:"p"},"healthPct")," parameter is the proportion of health the player having their health bar drawn has."),(0,l.kt)("p",null,"This event is a drawing event, so custom HUD drawing functions may be used."),(0,l.kt)("h3",{id:"ondrawcustomhud"},"onDrawCustomHud"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onDrawCustomHud(xRes: int, yRes: int)")),(0,l.kt)("p",null,"Event called once per frame to draw the custom HUD. The parameters give the resolution of the game view."),(0,l.kt)("p",null,"This event is a drawing event, so custom HUD drawing functions may be used."),(0,l.kt)("p",null,"Further information about custom HUD drawing is available on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/developer/api/doc_dev_api_drawing"},"Drawing page"),"."),(0,l.kt)("h3",{id:"oninputevent"},"onInputEvent"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"onInputEvent(keyPressed: string, eventType: InputEventType, ctrl: boolean, shift: boolean, alt: boolean)")),(0,l.kt)("p",null,"Event to intercept all key/mouse presses for custom input handling. The last three parameters allow for checking whether ctrl, alt and/or shift were held down while the key was pressed."),(0,l.kt)("p",null,"It is highly recommended that you ",(0,l.kt)("strong",{parentName:"p"},"do not")," handle this event directly; instead, use the keybinding API described ",(0,l.kt)("a",{parentName:"p",href:"#key-binding"},"below"),"."),(0,l.kt)("h2",{id:"key-binding"},"Key Binding"),(0,l.kt)("p",null,"The key names used for keybinding are as per the ",(0,l.kt)("a",{parentName:"p",href:"https://wiki.unrealengine.com/List_of_Key/Gamepad_Input_Names"},"Unreal Engine documentation"),"."),(0,l.kt)("h3",{id:"inputeventtype-enum"},"InputEventType enum"),(0,l.kt)("p",null,"This enum under the ",(0,l.kt)("inlineCode",{parentName:"p"},"enums")," namespace enumerates the possible types of input event."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.INPUT_EVENT_TYPE_PRESSED")," - event occurs when the key is pressed down"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.INPUT_EVENT_TYPE_RELEASED")," - event occurs when the key is released"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.INPUT_EVENT_TYPE_REPEAT")," - event triggers repeatedly while the key is held down"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"enums.INPUT_EVENT_TYPE_DOUBLECLICK")," - event triggers when the key is pressed twice in quick succession")),(0,l.kt)("h3",{id:"binding-functions"},"Binding Functions"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"bindKey(key: string, eventType: InputEventType, func: function): boolean")),(0,l.kt)("p",null,"Binds a key to execute the given function, returning whether the bind was successfully added. Multiple binds to the same key are allowed. The handler function should have the signature:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"func(keyPressed: string, eventType: InputEventType, ctrl: boolean, shift: boolean, alt: boolean)")),(0,l.kt)("p",null,"The key pressed, the input event type, and whether ctrl/shift/alt were held down will be passed to your handler as arguments."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"unbindKey(key: string, eventType: InputEventType): boolean")),(0,l.kt)("p",null,"Unbinds a key, returning whether the unbinding was successful."),(0,l.kt)("h3",{id:"retrieving-keybinds-from-tribesinput"},"Retrieving Keybinds from TribesInput"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"searchTribesInputCommands(action: regex string): list<KeyBind>")),(0,l.kt)("p",null,"Retrieve a list of native Unreal Engine bindings for actions matching the given regex, such as those set via the in-game menus or via ",(0,l.kt)("inlineCode",{parentName:"p"},"tribesinput.ini"),"."),(0,l.kt)("h4",{id:"keybind-class"},"KeyBind class"),(0,l.kt)("p",null,"The KeyBind class represents a native Unreal Engine keybind."),(0,l.kt)("h5",{id:"properties"},"Properties"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Property"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"name")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The key pressed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"command")),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"The command to be executed")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ctrl")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the bind requires Control held")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"shift")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the bind requires Shift held")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"alt")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the bind requires Alt held")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ignoreCtrl")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the bind is ignored if Control is held")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ignoreShift")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the bind is ignored if Shift is held")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ignoreAlt")),(0,l.kt)("td",{parentName:"tr",align:null},"boolean"),(0,l.kt)("td",{parentName:"tr",align:null},"Whether the bind is ignored if Alt is held")))))}m.isMDXComponent=!0}}]);